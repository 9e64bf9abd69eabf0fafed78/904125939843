user  nginx; # 指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。如果编译Nginx的时候指定了用户和用户组，该选项可以关闭

worker_processes  1; # 指定Nginx需要开启的进程数，每个进程平均耗费10~12M内存。建议数量设置成与CPU内核的数量一致。查看cpu的核心数命令: cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l

error_log  /var/log/nginx/error.log; # 定义全局错误日志文件，后面可以设置输出级别：debug、info、notice、warn、error、crit
pid /run/nginx.pid; # 用来指定进程id的存储文件位置

events {

    use epoll;  # 用来指定Nginx的工作模式，支持的模式有select、poll、kqueue、epoll、rtsig和/dev/poll。其中select和poll都是标准的工作模式, kqueue和epoll是高效的工作模式，前者用在linux平台上，后者用于BSD系统。

    accept_mutex on; #设置网路连接序列化，防止惊群现象发生，默认为on

    multi_accept on; #设置一个进程是否同时接受多个网络连接，默认为off

    open_file_cache_valid 60s; # 多长时间检查一次缓存的有效信息。如果有一个文件在inactive时间内一次没被使用，它将被移除

    open_file_cache max=2000 inactive=60s; # 为打开文件指定缓存，默认是off. max指定缓存最大数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存, 打开文件最大数量为worker_rlimit_nofile的值

    open_file_cache_min_uses 1; #  open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如果有一个文件在inactive时间内一次没被使用，它将被移除。

    worker_connections 1024; # 每个进程的最大连接数，默认是1024，该参数的最大连接数受Linux系统进程的最大打开文件数限制，必须使用 ulimit命令, 最大客户端连接数max_client=worker_processes*worker_connections，作为反向代理的话还需要除以4。
}

http {

    include mime.types; # 引用外部文件，类似于Apache中的include

    default_type  application/octet-stream; # 当出现无法解析的文件时，提示用户下载


    #log_format  main  '$remote_addr - $remote_user [$time_local] "$utils.request" ' # 定义日志的格式，后面的main为格式的名称，可以在access_log指令中进行引用
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;


    server_names_hash_bucket_size 128; # 设定请求缓冲
    client_header_buffer_size 4k; # 客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k,常见系统分页大小一般为4k 你可以通过 getconf PAGESIZE 查询:
    large_client_header_buffers 4 32k;
    client_max_body_size 100m; # 设置客户端能够上传文件大小的限制

    sendfile        on; # 是否开启高效文件传输模式，将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞
    tcp_nopush     on;
    tcp_nodelay  on;

    # 隐藏nginx的版本显示，增强安全性
    server_tokens off;

    # 用于设置客户端连接保持活动的超时时间，单位为秒，默认为75s
    #keepalive_timeout  0;
    keepalive_timeout  65;
    # 用于指定响应客户端的超时时间，这个超时仅限于两个连接活动之间的时间，默认为60s
    #send_timeout 60;

    # 下面是FastCGI的优化指令

    fastcgi_connect_timeout 300; # 连接到后端FastCGI的超时时间

    fastcgi_send_timeout 300; # 向FastCGI传送请求的超时时间

    fastcgi_read_timeout 300; # 接收FastCGI应答的超时时间

    fastcgi_buffer_size 64k; # 指定读取FastCGI应答第一部分需要多大的缓冲区
    fastcgi_buffers 4 64k;

    fastcgi_busy_buffers_size 128k; # 默认值是fastcgi_buffers的两倍

    fastcgi_temp_file_write_size 128k; # 表示在写入缓存文件时使用多大的数据块，默认为fastcgi_buffers的两倍
    # 为FastCGI缓存指定一个文件路径、目录结构等级、关键字区域存储时间和非活动删除时间
    #fastcgi_cache_path /usr/local/nginx/fastcgi_cache levels=1:2 keys_zone=TEST:10m inactive=5m;
    # 开启FastCGI缓存并为其设定一个名称。开启缓存可以有效降低CPU的负载，并且防止502错误的发生。
    # 但是同时也会引起很多问题，要视具体情况而定
    #fastcgi_cache TEST;
    # 用来指定应答代码的缓存时间，下面三条指令表示将200和303应答缓存1小时，301应答缓存1天，其他应答缓存1分钟。
    #fastcgi_cache_valid 200 302 1h;
    #fastcgi_cache_valid 301 1d;
    #fastcgi_cache_valid any 1m;

    # 配置Nginx的HttpGzip模块，开通的前提是安装的时候启用了该模块，使用 /usr/local/nginx/sbin/nginx -V 来查看安装的信息（大写的V）
    gzip  on;  # 是否开通gzip
    gzip_min_length 1k;# 允许压缩的页面最小字节数
    gzip_buffers 4 16k;
    gzip_http_version 1.1;
    gzip_comp_level 2; # 压缩比，从1到9，越大压缩率越高但越占资源，默认为1
    gzip_types text/plain application/x-javascript text/css application/xml text/javascript; # 指定压缩的类型，text/html总是被压缩
    gzip_vary on; # 是否让浏览器缓存压缩过的数据，默认为off

    # server 用于对虚拟主机的设置，建议每个站点的设置放到外部配置文件中，然后使用include进行引用
    # 这里设置一个默认的主机，当默认访问的时候返回403错误
server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _ ;
        root         /opt ; # 访问此端口时读取的服务器文件路径, 例如访问 xxx.com/a.txt ,  nginx会访问/opt下的a.txt

        include /etc/nginx/default.d/*.conf; # 读取/etc/nginx/default.d/下的全部.conf文件

        location / {
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
  }

    # 可以使用include将每个站点的配置引用进来，这样方便对站点进行管理
    include vhosts/examples.com.conf;
    include vhosts/abc.com.conf;
}
